from dev_up import DevUpAPI
from vkbottle.bot import BotLabeler
from vkbottle.bot import Message

from config import dev_up_key
from utils import get_forward, join, resolve_url

bl = BotLabeler()
bl.vbml_ignore_case = True


@bl.message(text="—Å—Ç–∏–∫–µ—Ä—ã")
async def greetin(message: Message):
    """
    —É—É—É—É—Ñ –Ω—É –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—è—Ç—å dev_up
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ https://api.dev-up.ru/method/vk.getStickers
    –≤ —Ñ–æ—Ä–º–∞—Ç–µ json
    {
        "key": "string",
        "user_id": 0
    }
    –ø–æ–ª—É—á–∞–µ–º –≤–æ—Ç —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç:
    {
        "response": {
        "user_id": 0,
        "count": 0,
        "stickers": [],
        "price": {}
        }
    }
    —É–¥–æ–±–Ω–µ–Ω—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è for —Ü–∏–∫–ª—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ—Ç dev_up
    """
    if message.reply_message == None:
        vk_user = message.from_id
    else:
        vk_user = message.reply_message.from_id
    us = await message.get_user(user_ids=vk_user)
    try:
        api = DevUpAPI(dev_up_key)
        stickers = api.vk.get_stickers(vk_user).response
        text = f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] " \
               f"–∏–º–µ–µ—Ç {stickers.count} —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {stickers.count_all}\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≥–æ–ª–æ—Å–∞—Ö: {stickers.price.votes}\n" \
               f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {stickers.price.rub}‚ÇΩ\n\n"
        text_stickers = []
        for sticker in stickers.stickers:
            text_stickers += [f"{sticker.name}"]

        ss = text + join(text_stickers, ", ")
        await message.answer(ss, disable_mentions=1, forward=get_forward(message))

    except Exception as ex:
        await message.answer(message=str(ex))

@bl.message(text="—Å—Ç–∏–∫–µ—Ä—ã [id<vk_user:int>|<other>")
async def greetin(message: Message, vk_user: int, **kwargs):
    us = await message.get_user(user_ids=vk_user)
    try:
        api = DevUpAPI(dev_up_key)
        stickers = api.vk.get_stickers(vk_user).response
        text = f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] " \
               f"–∏–º–µ–µ—Ç {stickers.count} —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {stickers.count_all}\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≥–æ–ª–æ—Å–∞—Ö: {stickers.price.votes}\n" \
               f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {stickers.price.rub}‚ÇΩ\n\n"
        text_stickers = []
        for sticker in stickers.stickers:
            text_stickers += [f"{sticker.name}"]

        ss = text + join(text_stickers, ", ")
        await message.answer(ss)

    except Exception as ex:
        await message.answer(message=str(ex))


@bl.message(text="—Å—Ç–∏–∫–µ—Ä—ã <vk_user>")
async def greetin(message: Message, vk_user: str):
    """–≤—Å–µ —Ç–æ–∂–µ —Å–∞–æ–º–µ –∫—Ä–æ–º–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    –º—ã –ø–æ–ª—É—á–∞–µ–º –µ–µ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É resolve_url"""
    id_user = await resolve_url(message, vk_user)
    us = await message.get_user(user_ids=id_user)
    try:
        api = DevUpAPI(dev_up_key)
        stickers = api.vk.get_stickers(id_user).response
        text = f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] " \
               f"–∏–º–µ–µ—Ç {stickers.count} —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {stickers.count_all}\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≥–æ–ª–æ—Å–∞—Ö: {stickers.price.votes}\n" \
               f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {stickers.price.rub}‚ÇΩ\n\n"
        text_stickers = []
        for sticker in stickers.stickers:
            text_stickers += [f"{sticker.name}"]

        ss = text + join(text_stickers, ", ")
        await message.answer(ss, disable_mentions=1, forward=get_forward(message))

    except Exception as ex:
        await message.answer(message=str(ex))


@bl.message(text="–ø–æ–¥–ø–∏—Å–∫–∏")
async def kik_bot(message: Message):
    "–±–ª—è –Ω—É —Ç–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –º–µ—Ö–∞–Ω–∏–∫–∞ —á—Ç–æ –∏ –≤—ã—à–µ"
    if message.reply_message == None:
        vk_user_id = message.from_id
    else:
        vk_user_id = message.reply_message.from_id
    us = await message.get_user(user_ids=vk_user_id)

    api = DevUpAPI(dev_up_key)

    custom = api.make_request(
        "vk.userGetSubscriptions",
        data=dict(user_id=f"{vk_user_id}"),
        dataclass=dict
    )
    print(custom)
    if custom['response']['count'] == 0:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    else:
        i = 0
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {custom['response']['count']} —á–µ–ª–æ–≤–µ–∫\n\n"
        while custom['response']['count'] > i:
            sss = custom["response"]["subscriptions"][i]
            uss = await message.get_user(user_ids=sss)
            text += f'[id{uss.id}|{uss.first_name} {uss.last_name}]\n'
            i += 1
    await message.answer(text, disable_mentions=1, forward=get_forward(message))


@bl.message(text="–ø–æ–¥–ø–∏—Å–∫–∏ <vk_user_id>")
async def kik_bot(message: Message, vk_user_id: str):
    "–±–ª—è –Ω—É —Ç–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –º–µ—Ö–∞–Ω–∏–∫–∞ —á—Ç–æ –∏ –≤—ã—à–µ"
    id_user = await resolve_url(message, vk_user_id)
    us = await message.get_user(user_ids=id_user)

    api = DevUpAPI(dev_up_key)

    custom = api.make_request(
        "vk.userGetSubscriptions",
        data=dict(user_id=f"{vk_user_id}"),
        dataclass=dict
    )
    print(custom)
    if custom['response']['count'] == 0:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    else:
        i = 0
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{us.id}|{us.first_name} {us.last_name}] –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {custom['response']['count']} —á–µ–ª–æ–≤–µ–∫\n\n"
        while custom['response']['count'] > i:
            sss = custom["response"]["subscriptions"][i]
            uss = await message.get_user(user_ids=sss)
            text += f'[id{uss.id}|{uss.first_name} {uss.last_name}]\n'
            i += 1
    await message.answer(text, disable_mentions=1, forward=get_forward(message))
